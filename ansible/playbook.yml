- hosts: all
  become: true

  vars:
    - ansible_python_interpreter: /usr/bin/python3
    - db:
        name: sandbox
        user: foobar
        password: "{{ lookup('password', '.postgres-password') }}"
        version: '9.5'

  handlers:
    - name: PostgreSQL Restarted
      service:
        name: postgresql
        state: restarted
      become_user: postgres

  tasks:
    - name: PostgreSQL is installed
      apt:
        name:
          - postgresql
          - postgresql-contrib
          - libpq-dev
          - python3-psycopg2
        update_cache: true
        state: present
      tags: packages

    - name: PostgreSQL is running
      service:
        name: postgresql
        state: started
        enabled: yes

    - name: Database exists
      postgresql_db:
        name: "{{ db.name }}"
        encoding: UTF-8
        lc_collate: en_US.UTF-8
        lc_ctype: en_US.UTF-8
        template: template0
        state: present
      become_user: postgres

    - name: User has access to the database
      postgresql_user:
        db: "{{ db.name }}"
        name: "{{ db.user }}"
        password: "{{ db.password }}"
        priv: ALL
        state: present
      become_user: postgres

    - name: User does not have unnecessary privileges
      postgresql_user:
        name: "{{ db.user }}"
        role_attr_flags: NOSUPERUSER,NOCREATEDB
        state: present
      become_user: postgres

    - name: Allow authenticated connections from 10.0.0.0
      lineinfile:
        path: "/etc/postgresql/{{ db.version }}/main/pg_hba.conf"
        line: "host all all 10.0.0.0/8 md5"
      notify:
        - PostgreSQL Restarted
      become_user: postgres

    - name: Listen on all interfaces
      lineinfile:
        path: "/etc/postgresql/{{ db.version }}/main/postgresql.conf"
        regexp: '^listen_addresses'
        line: "listen_addresses = '*'"
      notify:
        - PostgreSQL Restarted
      become_user: postgres

    - name: Create PITR directories
      file:
        path: "/var/lib/postgresql/{{ db.version }}/{{ item }}"
        state: directory
        owner: postgres
        group: postgres
        mode: 0700
      become_user: postgres
      loop:
        - wals
        - backups

    - name: Archiving is configured
      lineinfile:
        path: "/etc/postgresql/{{ db.version }}/main/postgresql.conf"
        line: "{{ item }}"
      loop:
        - 'wal_level=archive'
        - 'archive_mode=on'
        - "archive_command = 'test ! -f /var/lib/postgresql/{{ db.version }}/wals/%f && cp %p /var/lib/postgresql/{{ db.version }}/wals/%f'"
      notify:
        - PostgreSQL Restarted
      become_user: postgres
