- name: Program is installed
  apt:
    name:
      - pgbackrest
      - libdbd-pg-perl
      - libio-socket-ssl-perl
      - libxml-libxml-perl
      - python3-pip
    state: present

- name: Config file is up to date
  template:
    src: "{{ pgbackrest.archive_type }}/pgbackrest.conf.j2"
    dest: /etc/pgbackrest.conf
    owner: postgres
    group: postgres
    mode: 0644

- name: Repository is present
  file:
    path: /var/lib/pgbackrest
    state: directory
    owner: postgres
    group: postgres
    mode: 0750
  when: pgbackrest.archive_type == "local"

- name: Archiving is configured
  lineinfile:
    path: "/etc/postgresql/{{ db.version }}/{{ db.cluster_name }}/postgresql.conf"
    line: "{{ item }}"
  loop:
    - 'wal_level = hot_standby'
    - 'max_wal_senders = 3'
    - 'archive_mode = on'
    - "archive_command = 'pgbackrest --stanza={{ pgbackrest.stanza }} archive-push %p'"
  notify:
    - PostgreSQL Restarted
  become_user: postgres

- name: Make PostgreSQL log all SQL statements
  lineinfile:
    path: "/etc/postgresql/{{ db.version }}/{{ db.cluster_name }}/postgresql.conf"
    regexp: '^log_statement'
    line: "log_statement = 'all'"
  notify:
    - PostgreSQL Restarted
  become_user: postgres

- name: Ansible module requirements are satisfied
  pip:
    name: boto3

- name: S3 bucket exists
  s3_bucket:
    name: "{{ pgbackrest.s3_bucket }}"
    versioning: false
    aws_access_key: "{{ lookup('env', 'S3_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env', 'S3_SECRET_KEY') }}"
    state: present
  when: pgbackrest.archive_type == "s3"

- name: S3 bucket exists
  s3_bucket:
    name: "{{ pgbackrest.s3_bucket }}"
    versioning: false
    s3_url: "https://{{ minio.host }}"
    aws_access_key: "{{ minio.access_key }}"
    aws_secret_key: "{{ minio.secret_key }}"
    validate_certs: false
    ceph: true # https://github.com/ansible/ansible/issues/27099
    state: present
  ignore_errors: true # https://github.com/ansible/ansible/issues/42501
  when: pgbackrest.archive_type == "minio"

- name: Stanza exists
  command: pgbackrest --stanza={{ pgbackrest.stanza }} stanza-create
  args:
    creates:
      - /var/lib/pgbackrest/archive/{{ pgbackrest.stanza }}/archive.info
      - /var/lib/pgbackrest/backup/{{ pgbackrest.stanza }}/backup.info
  become_user: postgres

- name: PostgreSQL is restarted
  meta: flush_handlers

- name: Stanza is valid
  command: pgbackrest --stanza={{ pgbackrest.stanza }} check
  become_user: postgres
